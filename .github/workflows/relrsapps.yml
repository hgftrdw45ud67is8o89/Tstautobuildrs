name: Build Rust Apps

on:
  schedule:
    # Run at 00:00 on the first of every month
    - cron: '0 0 1 * *'
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Read repository list (Linux)
      if: runner.os == 'Linux'
      run: |
        while IFS= read -r repo; do
          repo=$(echo $repo | tr -d '\r')
          echo "Processing $repo"
          git clone $repo
          repo_name=$(basename "$repo" .git)
          cd "$repo_name"
          echo "Building $repo_name"
          cargo build --release --target-dir "../build-artifacts/${{ matrix.os }}/$repo_name"
          cd ..
        done < repos.txt

    - name: Read repository list (Windows)
      if: runner.os == 'Windows'
      run: |
        Get-Content repos.txt | ForEach-Object {
          $repo = $_.Trim()
          Write-Host "Processing $repo"
          git clone $repo
          $repo_name = $repo -replace '.*/(.*)\.git', '$1'
          Set-Location $repo_name
          Write-Host "Building $repo_name"
          cargo build --release --target-dir "../build-artifacts/${{ matrix.os }}/$repo_name"
          Set-Location ..
        }

    - name: Archive built binaries (Linux)
      if: runner.os == 'Linux'
      run: |
        mkdir -p build-artifacts/${{ matrix.os }}
        for repo in $(ls -d */); do
          repo_name=$(basename "$repo")
          echo "Checking for release directory in $repo_name"
          if [ -d "$repo/target/release" ]; then
            echo "Copying binaries from $repo/target/release"
            mkdir -p "build-artifacts/${{ matrix.os }}/$repo_name"
            cp -r "$repo/target/release/"* "build-artifacts/${{ matrix.os }}/$repo_name/"
          else
            echo "Release directory not found for $repo_name"
          fi
        done
        cd build-artifacts/${{ matrix.os }}
        zip -r "../${{ matrix.os }}-binaries.zip" .

    - name: Archive built binaries (Windows)
      if: runner.os == 'Windows'
      run: |
        $artifactsPath = "build-artifacts/${{ matrix.os }}"
        if (-Not (Test-Path -Path $artifactsPath)) {
          New-Item -ItemType Directory -Path $artifactsPath -Force
        }
        Get-ChildItem -Directory | ForEach-Object {
          $repo_name = $_.Name
          Write-Host "Checking for release directory in $repo_name"
          if (Test-Path "$_/$repo_name/target/release") {
            Write-Host "Copying binaries from $repo_name/target/release"
            $dest_path = "$artifactsPath/$repo_name"
            New-Item -ItemType Directory -Path $dest_path -Force
            Copy-Item "$_/$repo_name/target/release/*" -Destination $dest_path -Recurse
          } else {
            Write-Host "Release directory not found for $repo_name"
          }
        }
        Compress-Archive -Path "$artifactsPath/*" -DestinationPath "$artifactsPath-binaries.zip"

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-binaries
        path: build-artifacts/${{ matrix.os }}-binaries.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: ubuntu-latest-binaries
        path: ./binaries/linux
    - uses: actions/download-artifact@v3
      with:
        name: windows-latest-binaries
        path: ./binaries/windows

    - name: Install GitHub CLI
      uses: actions4gh/setup-gh@v1.0.2

    - name: Generate Release Tag
      id: generate_tag
      run: |
          # Generate a unique tag using the current date and time
          TAG="v$(date +'%Y%m%d%H%M%S')"
          echo "TAG=$TAG" >> $GITHUB_ENV

    - name: Create Release using GitHub CLI
      run: |
          gh release create $TAG ./binaries/linux/*.zip
      env:
          GH_REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Upload Windows Binaries
      run: |
          gh release upload $TAG ./binaries/windows/windows-latest-binaries.zip
      env:
          GH_REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ env.TAG }}
