name: Build Rust Apps

on:
  schedule:
    # Run at 00:00 on the first of every month
    - cron: '0 0 1 * *'
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Read repository list (Linux)
      if: runner.os == 'Linux'
      run: |
        while IFS= read -r repo; do
          repo=$(echo $repo | tr -d '\r')
          echo "Processing $repo"
          git clone $repo
          repo_name=$(basename "$repo" .git)
          cd "$repo_name"
          mkdir -p target/release
          echo "Building $repo_name"
          cargo build --release
          cd ..
        done < repos.txt

    - name: Read repository list (Windows)
      if: runner.os == 'Windows'
      run: |
        Get-Content repos.txt | ForEach-Object {
          $repo = $_.Trim()
          Write-Host "Processing $repo"
          git clone $repo
          $repo_name = $repo -replace '.*/(.*)\.git', '$1'
          Set-Location $repo_name
          New-Item -ItemType Directory -Path target/release -Force
          Write-Host "Building $repo_name"
          cargo build --release
          Set-Location ..
        }

    - name: Archive built binaries
      run: |
        mkdir -p build-artifacts/${{ matrix.os }}
        for repo in $(ls -d */); do
          repo_name=$(basename "$repo")
          echo "Checking for release directory in $repo_name"
          if [ -d "$repo/target/release" ]; then
            echo "Copying binaries from $repo/target/release"
            cp -r "$repo/target/release/"* "build-artifacts/${{ matrix.os }}/"
          else
            echo "Release directory not found for $repo_name"
          fi
        done
        cd build-artifacts/${{ matrix.os }}
        zip -r "../${{ matrix.os }}-binaries.zip" .
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-binaries
        path: build-artifacts/${{ matrix.os }}-binaries.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: ubuntu-latest-binaries
        path: ./binaries/linux
    - uses: actions/download-artifact@v3
      with:
        name: windows-latest-binaries
        path: ./binaries/windows

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./binaries/linux/ubuntu-latest-binaries.zip
          ./binaries/windows/windows-latest-binaries.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
